{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RADON Defect Predictor The RADON Defect Predictor is a Python library and a command-line tool to train and use Machine-Learning models for infrastructure code defect prediction. How to install From PyPIP: available soon From source code: git clone https://github.com/radon-h2020/radon-defect-prediction.git cd radon-defect-predictor pip install . How to test pip install pytest unzip test_data.zip -d . pip install . pytest tests/","title":"Getting Started"},{"location":"#radon-defect-predictor","text":"The RADON Defect Predictor is a Python library and a command-line tool to train and use Machine-Learning models for infrastructure code defect prediction.","title":"RADON Defect Predictor"},{"location":"#how-to-install","text":"From PyPIP: available soon From source code: git clone https://github.com/radon-h2020/radon-defect-prediction.git cd radon-defect-predictor pip install .","title":"How to install"},{"location":"#how-to-test","text":"pip install pytest unzip test_data.zip -d . pip install . pytest tests/","title":"How to test"},{"location":"about/","text":"","title":"About"},{"location":"apis/","text":"API Reference predictors.DefectPredictor This module includes one class, DefectPredictor, representing a defect predictor. class radondp.predictors.DefectPredictor() Class representing a defect predictor. It contains the logic to train a model, save and load a model from the disk, use that model to predict unseen instances. __init__() Init the DefectPredictor balancers() -> list Return the list of instances used to balance the train data. balancers(balancers:List[str]) -> None Set the balancers to train the model. \u2003\u2003 Parameters: \u2003\u2003 balancers (List[str]) - a list of balancers (e.g., [none, rus, ros] ) \u2003\u2003 Raise: \u2003\u2003 ValueError - if one or more balancers are not in [none, rus, ros] normalizers() -> list Return the list of instances used to normalize train and test data. normalizers(normalizers:List[str]) -> None Set the normalizers to scale data. \u2003\u2003 Parameters: \u2003\u2003 normalizers (List[str]) - a list of normalizers (e.g., [none, minmax, std] ) \u2003\u2003 Raise: \u2003\u2003 ValueError - if one or more normalizers are not in [none, minmax, std] classifiers() Return the list of instances used to train the model classifier. classifiers(classifiers:List[str]) Set the balancers to train the model. \u2003\u2003 Parameters: \u2003\u2003 classifiers (List[str]) - a list of classifiers (e.g., [dt, logit, nb, rf, svm] ) \u2003\u2003 Raise: \u2003\u2003 ValueError - if one or more normalizers are not in [dt, logit, nb, rf, svm] train(data:pandas.DataFrame) -> imblearn.pipeline.Pipeline Train a new model \u2003\u2003 Parameters: \u2003\u2003 data (pandas.DataFrame) - the train data consisting of metrics and metadata about clean and failure_prone scripts \u2003\u2003 Return: the best fitted estimator, that is, the one that maximizes the average_precision \u2003\u2003 Raise: \u2003\u2003 Fail - if columns failure_prone , commit , committed_at , filepath are not in data predict(unseed_data:pandas.DataFrame) -> bool Predict an unseen instance as failure-prone or clean. \u2003\u2003 Parameters: \u2003\u2003 data (pandas.DataFrame) - the unseen data consisting of the observations to predict \u2003\u2003 Return: True if failure-prone ; False otherwise \u2003\u2003 Raise: \u2003\u2003 Exception - if no model has been loaded. load_model(path_to_model_dir: str) -> None Load a model from the disk. \u2003\u2003 Parameters: \u2003\u2003 path_to_model_dir (str) - the path to the directory containing model-related files dump_model(path_to_model_dir: str) -> None Dump the trained model to the disk. \u2003\u2003 Parameters: \u2003\u2003 path_to_model_dir (str) - the path to the directory where to save model-related files","title":"APIs"},{"location":"apis/#api-reference","text":"","title":"API Reference"},{"location":"apis/#predictorsdefectpredictor","text":"This module includes one class, DefectPredictor, representing a defect predictor. class radondp.predictors.DefectPredictor() Class representing a defect predictor. It contains the logic to train a model, save and load a model from the disk, use that model to predict unseen instances. __init__() Init the DefectPredictor balancers() -> list Return the list of instances used to balance the train data. balancers(balancers:List[str]) -> None Set the balancers to train the model. \u2003\u2003 Parameters: \u2003\u2003 balancers (List[str]) - a list of balancers (e.g., [none, rus, ros] ) \u2003\u2003 Raise: \u2003\u2003 ValueError - if one or more balancers are not in [none, rus, ros] normalizers() -> list Return the list of instances used to normalize train and test data. normalizers(normalizers:List[str]) -> None Set the normalizers to scale data. \u2003\u2003 Parameters: \u2003\u2003 normalizers (List[str]) - a list of normalizers (e.g., [none, minmax, std] ) \u2003\u2003 Raise: \u2003\u2003 ValueError - if one or more normalizers are not in [none, minmax, std] classifiers() Return the list of instances used to train the model classifier. classifiers(classifiers:List[str]) Set the balancers to train the model. \u2003\u2003 Parameters: \u2003\u2003 classifiers (List[str]) - a list of classifiers (e.g., [dt, logit, nb, rf, svm] ) \u2003\u2003 Raise: \u2003\u2003 ValueError - if one or more normalizers are not in [dt, logit, nb, rf, svm] train(data:pandas.DataFrame) -> imblearn.pipeline.Pipeline Train a new model \u2003\u2003 Parameters: \u2003\u2003 data (pandas.DataFrame) - the train data consisting of metrics and metadata about clean and failure_prone scripts \u2003\u2003 Return: the best fitted estimator, that is, the one that maximizes the average_precision \u2003\u2003 Raise: \u2003\u2003 Fail - if columns failure_prone , commit , committed_at , filepath are not in data predict(unseed_data:pandas.DataFrame) -> bool Predict an unseen instance as failure-prone or clean. \u2003\u2003 Parameters: \u2003\u2003 data (pandas.DataFrame) - the unseen data consisting of the observations to predict \u2003\u2003 Return: True if failure-prone ; False otherwise \u2003\u2003 Raise: \u2003\u2003 Exception - if no model has been loaded. load_model(path_to_model_dir: str) -> None Load a model from the disk. \u2003\u2003 Parameters: \u2003\u2003 path_to_model_dir (str) - the path to the directory containing model-related files dump_model(path_to_model_dir: str) -> None Dump the trained model to the disk. \u2003\u2003 Parameters: \u2003\u2003 path_to_model_dir (str) - the path to the directory where to save model-related files","title":"predictors.DefectPredictor"},{"location":"cli/getting_started/","text":"Getting Started usage: radon-defect-predictor [-h] [-v] {train,download-model,predict} ... A Python library to train machine learning models for defect prediction of infrastructure code positional arguments: {train,download-model,predict} train Train a brand new model from scratch download-model Download a pre-trained model from the online APIs predict Predict unseen instances optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit Warning radon-defect-predictor predict must be used after having trained a model with radon-defect-predictor train , or after having downloaded a pre-trained model from the online RADON Defect Prediction Framework APIs, using the radon-defect-predictor download-model command. Go the next pages for examples of usage of each of the command-line options.","title":"Getting Started"},{"location":"cli/getting_started/#getting-started","text":"usage: radon-defect-predictor [-h] [-v] {train,download-model,predict} ... A Python library to train machine learning models for defect prediction of infrastructure code positional arguments: {train,download-model,predict} train Train a brand new model from scratch download-model Download a pre-trained model from the online APIs predict Predict unseen instances optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit Warning radon-defect-predictor predict must be used after having trained a model with radon-defect-predictor train , or after having downloaded a pre-trained model from the online RADON Defect Prediction Framework APIs, using the radon-defect-predictor download-model command. Go the next pages for examples of usage of each of the command-line options.","title":"Getting Started"},{"location":"cli/model/","text":"Download a pre-trained model Warning This command is partially implemented. usage: radon-defect-predictor download-model [-h] [-t TOKEN] {ansible,tosca} {github,gitlab} repository_full_name_or_id path_to_repository positional arguments: {ansible,tosca} the language the model to download is trained on {github,gitlab} the platform the user's repository is hosted to repository_full_name_or_id the remote repository full name or id (e.g., radon-h2020/radon-defect-prediction-cli) path_to_repository the local path to the user's repository optional arguments: -h, --help show this help message and exit -t TOKEN, --token TOKEN the Github or Gitlab personal access token language Every models are trained for a specific language. To download the proper model the user must specify the language on which they want to use the model. Ansible and TOSCA are currently supported. If the project contains both Ansible and Tosca files, the user can download two models by running the command twice, passing the option ansible and tosca , respectively. host {github, gitlab} The hosting platform for software development and version control using Git. Github and Gitlab are supported. This option is required to use the appropriate APIs ( pygithub or python-gitlab ) to compute some of the aforementioned criteria. path_to_repository radon-defect-predictor model download --path-to-csv path/to/local/git/repository/ The path to the a local git repository . It is necessary to select the appropriate model for the repository at hand. Indeed, the downloaded model is the model trained on the most similar repository based on the following criteria: Core contributors: the number of contributors whose total number of commits accounts for 80% or more of the total contributions. Continuous integration (CI): the repository has evidence of a CI service, determined by the presence of a configuration file required by that service (e.g., a.travis.ymlfor TravisCI). Comments ratio: ratio between comments and lines of code. Commit frequency: the average number of commits per month. Issue frequency: the average number of issue events transpired per month. License availability: the repository has evidence of a license (i.e., a LICENSE file). Lines of Code: the number of executable lines of code. Ratio of IaC scripts: ratio between Infrastructure-as-Code (IaC) files and total files. The value of each criterion is automatically extracted by the radon-repository-scorer this tool depends on. repository_full_name_or_id The repository full name or id (e.g., radon-h2020/radon-defect-predictor). -t, --token radon-defect-predictor model download -t <SECRET_TOKEN> The personal access token to access Github and Gitlab APIs. See how to get one from Github and Gitlab . Once generated, pass the token to the --token option. If not passed in the command, the user will be prompt for inserting one. For example: radon-defect-predictor model download --path-to-repository some/path --host github -l ansible -d some/other/path/ Github access token: *************** Note You may want to avoid the previous step. If so, add the following to your environment variables: GITHUB_ACCESS_TOKEN=<paste your token here> for Github, and/or GITLAB_ACCESS_TOKEN=<paste your token here> for Gitlab. Examples TODO","title":"Model"},{"location":"cli/model/#download-a-pre-trained-model","text":"Warning This command is partially implemented. usage: radon-defect-predictor download-model [-h] [-t TOKEN] {ansible,tosca} {github,gitlab} repository_full_name_or_id path_to_repository positional arguments: {ansible,tosca} the language the model to download is trained on {github,gitlab} the platform the user's repository is hosted to repository_full_name_or_id the remote repository full name or id (e.g., radon-h2020/radon-defect-prediction-cli) path_to_repository the local path to the user's repository optional arguments: -h, --help show this help message and exit -t TOKEN, --token TOKEN the Github or Gitlab personal access token","title":"Download a pre-trained model"},{"location":"cli/model/#language","text":"Every models are trained for a specific language. To download the proper model the user must specify the language on which they want to use the model. Ansible and TOSCA are currently supported. If the project contains both Ansible and Tosca files, the user can download two models by running the command twice, passing the option ansible and tosca , respectively.","title":"language"},{"location":"cli/model/#host-github-gitlab","text":"The hosting platform for software development and version control using Git. Github and Gitlab are supported. This option is required to use the appropriate APIs ( pygithub or python-gitlab ) to compute some of the aforementioned criteria.","title":"host {github, gitlab}"},{"location":"cli/model/#path_to_repository","text":"radon-defect-predictor model download --path-to-csv path/to/local/git/repository/ The path to the a local git repository . It is necessary to select the appropriate model for the repository at hand. Indeed, the downloaded model is the model trained on the most similar repository based on the following criteria: Core contributors: the number of contributors whose total number of commits accounts for 80% or more of the total contributions. Continuous integration (CI): the repository has evidence of a CI service, determined by the presence of a configuration file required by that service (e.g., a.travis.ymlfor TravisCI). Comments ratio: ratio between comments and lines of code. Commit frequency: the average number of commits per month. Issue frequency: the average number of issue events transpired per month. License availability: the repository has evidence of a license (i.e., a LICENSE file). Lines of Code: the number of executable lines of code. Ratio of IaC scripts: ratio between Infrastructure-as-Code (IaC) files and total files. The value of each criterion is automatically extracted by the radon-repository-scorer this tool depends on.","title":"path_to_repository"},{"location":"cli/model/#repository_full_name_or_id","text":"The repository full name or id (e.g., radon-h2020/radon-defect-predictor).","title":"repository_full_name_or_id"},{"location":"cli/model/#-t-token","text":"radon-defect-predictor model download -t <SECRET_TOKEN> The personal access token to access Github and Gitlab APIs. See how to get one from Github and Gitlab . Once generated, pass the token to the --token option. If not passed in the command, the user will be prompt for inserting one. For example: radon-defect-predictor model download --path-to-repository some/path --host github -l ansible -d some/other/path/ Github access token: *************** Note You may want to avoid the previous step. If so, add the following to your environment variables: GITHUB_ACCESS_TOKEN=<paste your token here> for Github, and/or GITLAB_ACCESS_TOKEN=<paste your token here> for Gitlab.","title":"-t, --token"},{"location":"cli/model/#examples","text":"TODO","title":"Examples"},{"location":"cli/predict/","text":"Predict unseen instances usage: radon-defect-predictor predict [-h] language path_to_artefact positional arguments: {ansible,tosca} the language of the file (i.e., TOSCA or YAML-based Ansible) path_to_artefact the path to the artefact to analyze (i.e., an Ansible or Tosca file or .csar optional arguments: -h, --help show this help message and exit Output This command will generate a radondp_predictions.json file in the user working directory. The file contains information about the filepath , failure-proneness , and date of analysis of the analyzed files. If a file already exists with that name, this command will append the new predictions to it. Note: To let the tool automatically identify the model, the user must run the command within the same working directory of radondp_model.joblib . Make sure you trained or downloaded a model first. language The language of the file to analyze (that is Ansible or Tosca). This is needed to automatically extract the proper metrics (through radon-ansible-metrics (https://github.com/radon-h2020/radon-ansible-metrics) or radon-tosca-metrics (https://github.com/radon-h2020/radon-tosca-metrics)) to pass to the predictor. path_to_artefact The path to the artefact to analyze. An artefact can be an Ansible file ( .yml ), a TOSCA definition ( .tosca ), or a TOSCA Cloud Service Archive( .csar ). Examples Predict on a single script For the sake of example, move to the radon_example working directory. If you do not have a model, train or download one first. Download playbook.yml to test an Ansible model. Download definition.tosca to test a Tosca model. Download tosca.csar to test a Tosca model. Copy the file(s) in radon_example . Then, run: radon-defect-predictor predict ansible playbook.yml (for Ansible) radon-defect-predictor predict tosca definition.yml (for Tosca) radon-defect-predictor predict tosca tosca.csar (for Tosca CSAR) You can now see the results: ls prediction_results.json Predict on a .CSAR Create a working directory: mkdir csar_example cd csar_example Download the following [tosca.csar] and a pre-trained model as described [here] in csar_example . Create folder for reports: mkdir reports Then run: radon-defect-predictor predict --path-to-model downloaded_model --path-to-artefact tosca.csar -l ansible --d reports You can now see the report: cd predictions ls prediction_results.json","title":"Predict"},{"location":"cli/predict/#predict-unseen-instances","text":"usage: radon-defect-predictor predict [-h] language path_to_artefact positional arguments: {ansible,tosca} the language of the file (i.e., TOSCA or YAML-based Ansible) path_to_artefact the path to the artefact to analyze (i.e., an Ansible or Tosca file or .csar optional arguments: -h, --help show this help message and exit Output This command will generate a radondp_predictions.json file in the user working directory. The file contains information about the filepath , failure-proneness , and date of analysis of the analyzed files. If a file already exists with that name, this command will append the new predictions to it. Note: To let the tool automatically identify the model, the user must run the command within the same working directory of radondp_model.joblib . Make sure you trained or downloaded a model first.","title":"Predict unseen instances"},{"location":"cli/predict/#language","text":"The language of the file to analyze (that is Ansible or Tosca). This is needed to automatically extract the proper metrics (through radon-ansible-metrics (https://github.com/radon-h2020/radon-ansible-metrics) or radon-tosca-metrics (https://github.com/radon-h2020/radon-tosca-metrics)) to pass to the predictor.","title":"language"},{"location":"cli/predict/#path_to_artefact","text":"The path to the artefact to analyze. An artefact can be an Ansible file ( .yml ), a TOSCA definition ( .tosca ), or a TOSCA Cloud Service Archive( .csar ).","title":"path_to_artefact"},{"location":"cli/predict/#examples","text":"","title":"Examples"},{"location":"cli/predict/#predict-on-a-single-script","text":"For the sake of example, move to the radon_example working directory. If you do not have a model, train or download one first. Download playbook.yml to test an Ansible model. Download definition.tosca to test a Tosca model. Download tosca.csar to test a Tosca model. Copy the file(s) in radon_example . Then, run: radon-defect-predictor predict ansible playbook.yml (for Ansible) radon-defect-predictor predict tosca definition.yml (for Tosca) radon-defect-predictor predict tosca tosca.csar (for Tosca CSAR) You can now see the results: ls prediction_results.json","title":"Predict on a single script"},{"location":"cli/predict/#predict-on-a-csar","text":"Create a working directory: mkdir csar_example cd csar_example Download the following [tosca.csar] and a pre-trained model as described [here] in csar_example . Create folder for reports: mkdir reports Then run: radon-defect-predictor predict --path-to-model downloaded_model --path-to-artefact tosca.csar -l ansible --d reports You can now see the report: cd predictions ls prediction_results.json","title":"Predict on a .CSAR"},{"location":"cli/train/","text":"Train a new model from scratch usage: radon-defect-predictor train [-h] [--balancers BALANCERS] [--normalizers NORMALIZERS] path_to_csv classifiers positional arguments: path_to_csv the path to the csv file containing the data for training classifiers a list of classifiers to train. Possible choices [dt, logit, nb, rf, svm] optional arguments: -h, --help show this help message and exit --balancers BALANCERS a list of balancer to balance training data. Possible choices [none, rus, ros] --normalizers NORMALIZERS a list of normalizers to normalize data. Possible choices [none, minmax, std] Output This command will generate a radondp_model.joblib file in the user working directory. The file contains information about the best estimator, subset of features selected by the training, and the results of cross-validation. Note: The radondp_model.joblib will override the existing one in the user working directory, if any. path_to_csv radon-defect-predictor train --path-to-csv path/to/repository-data.csv The path to the training data (a .csv file). You can generate training data for IaC defect-prediction through radon-miner . An example observation is the following: filepath commit committed_at failure_prone metric_1 ... metric_n roles/tasks/main.yml 25c04... 1526444640 1 value_1 ... value_n filepath: string is the path to the file from the repository root; commit: string is the commit sha the file belongs to. In per-release based defect-prediction, it is the commit sha of a release, and it is used to group observations of the same release; committed_at: string is the commit datetime. In release-based defect-prediction, it is the release date. In just-in-time defect-prediction is the commit date. It is used to sort releases/commits for walk-forward validation; failure_prone: integer 1 if the observation is failure-prone ; 0 otherwise; metric_i: float a metric. Warning Missing one of the following columns will raise an error: filepath , commit , committed_at , failure_prone . classifiers radon-defect-predictor train --classifiers=\"dt logit nb rf svm\" dt - Train a model using a sklearn.tree.DecisionTreeClassifier classifier; logit - Train a model using a sklearn.linear_model.LogisticRegression classifier; nb - Train a model using a sklearn.naive_bayes.GaussianNB classifier; rf - Train a model using a sklearn.ensemble.RandomForestClassifier classifier; svm - Train a model using a sklearn.tree.DecisionTreeClassifier classifier. --balancers radon-defect-predictor train --balancers=\"none rus ros\" none - Do not balance training data; rus - Do balance training data using Random Under-Sampling ; ros - Do balance training data using Random Over-Sampling . Not providing any options is the same as passing the option none . However, this option can be passed along the others to train the model by either balancing and not balancing the training set. --normalizers radon-defect-predictor train --normalizers=\"none minmax std\" none - Do not normalize training data; minmax - Transform features by scaling each feature to the range [0,1]. It uses the sklearn.preprocessing.MinMaxScaler ; std - Standardize features by removing the mean and scaling to unit variance. It uses the sklearn.preprocessing.StandardScaler . Not providing any options is the same as passing the option none . However, this option can be passed along the others to train the model by either normalizing and not normalizing the training set. Example Assuming we are training a new model for the ansible-community/molecule project, download the following training set molecule.csv generated using radon-miner . This is the \"ground truth\" to train a model for that project. You can now run the radon-defect-predictor train ... wherever on your system. For the sake of example, let's create and move to a new working directory: mkdir radon_example cd radon_example mv /home/<user>/Downloads/molecule.csv . Now run: radon-defect-predictor train molecule.csv \"dt\" --balancers \"none rus\" --normalizers \"minmax\" or (equivalent) radon-defect-predictor train molecule.csv \"dt\" -b \"none rus\" -n \"minmax\" The previous command loads and prepares the .csv file. Then, it builds a model using: the Decision Tree classifier ( \"dt\" ); the Random Under-Sampling technique to balance the training data ( rus ), or none ( none ); the minmax normalization to scale data within the range [0,1] ( minmax ). The built model ( radondp_model.joblib ) is saved into the current working directory. You can see it by running: ls molecule.csv radondp_model.joblib You can run the same command with different combinations of balancers, normalizers, and classifiers, as explained in previous sections.","title":"Train"},{"location":"cli/train/#train-a-new-model-from-scratch","text":"usage: radon-defect-predictor train [-h] [--balancers BALANCERS] [--normalizers NORMALIZERS] path_to_csv classifiers positional arguments: path_to_csv the path to the csv file containing the data for training classifiers a list of classifiers to train. Possible choices [dt, logit, nb, rf, svm] optional arguments: -h, --help show this help message and exit --balancers BALANCERS a list of balancer to balance training data. Possible choices [none, rus, ros] --normalizers NORMALIZERS a list of normalizers to normalize data. Possible choices [none, minmax, std] Output This command will generate a radondp_model.joblib file in the user working directory. The file contains information about the best estimator, subset of features selected by the training, and the results of cross-validation. Note: The radondp_model.joblib will override the existing one in the user working directory, if any.","title":"Train a new model from scratch"},{"location":"cli/train/#path_to_csv","text":"radon-defect-predictor train --path-to-csv path/to/repository-data.csv The path to the training data (a .csv file). You can generate training data for IaC defect-prediction through radon-miner . An example observation is the following: filepath commit committed_at failure_prone metric_1 ... metric_n roles/tasks/main.yml 25c04... 1526444640 1 value_1 ... value_n filepath: string is the path to the file from the repository root; commit: string is the commit sha the file belongs to. In per-release based defect-prediction, it is the commit sha of a release, and it is used to group observations of the same release; committed_at: string is the commit datetime. In release-based defect-prediction, it is the release date. In just-in-time defect-prediction is the commit date. It is used to sort releases/commits for walk-forward validation; failure_prone: integer 1 if the observation is failure-prone ; 0 otherwise; metric_i: float a metric. Warning Missing one of the following columns will raise an error: filepath , commit , committed_at , failure_prone .","title":"path_to_csv"},{"location":"cli/train/#classifiers","text":"radon-defect-predictor train --classifiers=\"dt logit nb rf svm\" dt - Train a model using a sklearn.tree.DecisionTreeClassifier classifier; logit - Train a model using a sklearn.linear_model.LogisticRegression classifier; nb - Train a model using a sklearn.naive_bayes.GaussianNB classifier; rf - Train a model using a sklearn.ensemble.RandomForestClassifier classifier; svm - Train a model using a sklearn.tree.DecisionTreeClassifier classifier.","title":"classifiers"},{"location":"cli/train/#-balancers","text":"radon-defect-predictor train --balancers=\"none rus ros\" none - Do not balance training data; rus - Do balance training data using Random Under-Sampling ; ros - Do balance training data using Random Over-Sampling . Not providing any options is the same as passing the option none . However, this option can be passed along the others to train the model by either balancing and not balancing the training set.","title":"--balancers"},{"location":"cli/train/#-normalizers","text":"radon-defect-predictor train --normalizers=\"none minmax std\" none - Do not normalize training data; minmax - Transform features by scaling each feature to the range [0,1]. It uses the sklearn.preprocessing.MinMaxScaler ; std - Standardize features by removing the mean and scaling to unit variance. It uses the sklearn.preprocessing.StandardScaler . Not providing any options is the same as passing the option none . However, this option can be passed along the others to train the model by either normalizing and not normalizing the training set.","title":"--normalizers"},{"location":"cli/train/#example","text":"Assuming we are training a new model for the ansible-community/molecule project, download the following training set molecule.csv generated using radon-miner . This is the \"ground truth\" to train a model for that project. You can now run the radon-defect-predictor train ... wherever on your system. For the sake of example, let's create and move to a new working directory: mkdir radon_example cd radon_example mv /home/<user>/Downloads/molecule.csv . Now run: radon-defect-predictor train molecule.csv \"dt\" --balancers \"none rus\" --normalizers \"minmax\" or (equivalent) radon-defect-predictor train molecule.csv \"dt\" -b \"none rus\" -n \"minmax\" The previous command loads and prepares the .csv file. Then, it builds a model using: the Decision Tree classifier ( \"dt\" ); the Random Under-Sampling technique to balance the training data ( rus ), or none ( none ); the minmax normalization to scale data within the range [0,1] ( minmax ). The built model ( radondp_model.joblib ) is saved into the current working directory. You can see it by running: ls molecule.csv radondp_model.joblib You can run the same command with different combinations of balancers, normalizers, and classifiers, as explained in previous sections.","title":"Example"}]}