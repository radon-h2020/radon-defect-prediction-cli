{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RADON Defect Predictor The RADON Defect Predictor is a Python library and a command-line tool to train and use Machine-Learning models for infrastructure code defect prediction. How to install From PyPIP: available soon From source code: git clone https://github.com/radon-h2020/radon-defect-prediction.git cd radon-defect-predictor pip install . How to test pip install pytest unzip test_data.zip -d . pip install . pytest tests/","title":"Getting Started"},{"location":"#radon-defect-predictor","text":"The RADON Defect Predictor is a Python library and a command-line tool to train and use Machine-Learning models for infrastructure code defect prediction.","title":"RADON Defect Predictor"},{"location":"#how-to-install","text":"From PyPIP: available soon From source code: git clone https://github.com/radon-h2020/radon-defect-prediction.git cd radon-defect-predictor pip install .","title":"How to install"},{"location":"#how-to-test","text":"pip install pytest unzip test_data.zip -d . pip install . pytest tests/","title":"How to test"},{"location":"about/","text":"","title":"About"},{"location":"apis/","text":"API Reference predictors.DefectPredictor This module includes one class, DefectPredictor, representing a defect predictor. class radondp.predictors.DefectPredictor() Class representing a defect predictor. It contains the logic to train a model, save and load a model from the disk, use that model to predict unseen instances. __init__() Init the DefectPredictor balancers() -> list Return the list of instances used to balance the train data. balancers(balancers:List[str]) -> None Set the balancers to train the model. \u2003\u2003 Parameters: \u2003\u2003 balancers (List[str]) - a list of balancers (e.g., [none, rus, ros] ) \u2003\u2003 Raise: \u2003\u2003 ValueError - if one or more balancers are not in [none, rus, ros] normalizers() -> list Return the list of instances used to normalize train and test data. normalizers(normalizers:List[str]) -> None Set the normalizers to scale data. \u2003\u2003 Parameters: \u2003\u2003 normalizers (List[str]) - a list of normalizers (e.g., [none, minmax, std] ) \u2003\u2003 Raise: \u2003\u2003 ValueError - if one or more normalizers are not in [none, minmax, std] classifiers() Return the list of instances used to train the model classifier. classifiers(classifiers:List[str]) Set the balancers to train the model. \u2003\u2003 Parameters: \u2003\u2003 classifiers (List[str]) - a list of classifiers (e.g., [dt, logit, nb, rf, svm] ) \u2003\u2003 Raise: \u2003\u2003 ValueError - if one or more normalizers are not in [dt, logit, nb, rf, svm] train(data:pandas.DataFrame) -> imblearn.pipeline.Pipeline Train a new model \u2003\u2003 Parameters: \u2003\u2003 data (pandas.DataFrame) - the train data consisting of metrics and metadata about clean and failure_prone scripts \u2003\u2003 Return: the best fitted estimator, that is, the one that maximizes the average_precision \u2003\u2003 Raise: \u2003\u2003 Fail - if columns failure_prone , commit , committed_at , filepath are not in data predict(unseed_data:pandas.DataFrame) -> bool Predict an unseen instance as failure-prone or clean. \u2003\u2003 Parameters: \u2003\u2003 data (pandas.DataFrame) - the unseen data consisting of the observations to predict \u2003\u2003 Return: True if failure-prone ; False otherwise \u2003\u2003 Raise: \u2003\u2003 Exception - if no model has been loaded. load_model(path_to_model_dir: str) -> None Load a model from the disk. \u2003\u2003 Parameters: \u2003\u2003 path_to_model_dir (str) - the path to the directory containing model-related files dump_model(path_to_model_dir: str) -> None Dump the trained model to the disk. \u2003\u2003 Parameters: \u2003\u2003 path_to_model_dir (str) - the path to the directory where to save model-related files","title":"APIs"},{"location":"apis/#api-reference","text":"","title":"API Reference"},{"location":"apis/#predictorsdefectpredictor","text":"This module includes one class, DefectPredictor, representing a defect predictor. class radondp.predictors.DefectPredictor() Class representing a defect predictor. It contains the logic to train a model, save and load a model from the disk, use that model to predict unseen instances. __init__() Init the DefectPredictor balancers() -> list Return the list of instances used to balance the train data. balancers(balancers:List[str]) -> None Set the balancers to train the model. \u2003\u2003 Parameters: \u2003\u2003 balancers (List[str]) - a list of balancers (e.g., [none, rus, ros] ) \u2003\u2003 Raise: \u2003\u2003 ValueError - if one or more balancers are not in [none, rus, ros] normalizers() -> list Return the list of instances used to normalize train and test data. normalizers(normalizers:List[str]) -> None Set the normalizers to scale data. \u2003\u2003 Parameters: \u2003\u2003 normalizers (List[str]) - a list of normalizers (e.g., [none, minmax, std] ) \u2003\u2003 Raise: \u2003\u2003 ValueError - if one or more normalizers are not in [none, minmax, std] classifiers() Return the list of instances used to train the model classifier. classifiers(classifiers:List[str]) Set the balancers to train the model. \u2003\u2003 Parameters: \u2003\u2003 classifiers (List[str]) - a list of classifiers (e.g., [dt, logit, nb, rf, svm] ) \u2003\u2003 Raise: \u2003\u2003 ValueError - if one or more normalizers are not in [dt, logit, nb, rf, svm] train(data:pandas.DataFrame) -> imblearn.pipeline.Pipeline Train a new model \u2003\u2003 Parameters: \u2003\u2003 data (pandas.DataFrame) - the train data consisting of metrics and metadata about clean and failure_prone scripts \u2003\u2003 Return: the best fitted estimator, that is, the one that maximizes the average_precision \u2003\u2003 Raise: \u2003\u2003 Fail - if columns failure_prone , commit , committed_at , filepath are not in data predict(unseed_data:pandas.DataFrame) -> bool Predict an unseen instance as failure-prone or clean. \u2003\u2003 Parameters: \u2003\u2003 data (pandas.DataFrame) - the unseen data consisting of the observations to predict \u2003\u2003 Return: True if failure-prone ; False otherwise \u2003\u2003 Raise: \u2003\u2003 Exception - if no model has been loaded. load_model(path_to_model_dir: str) -> None Load a model from the disk. \u2003\u2003 Parameters: \u2003\u2003 path_to_model_dir (str) - the path to the directory containing model-related files dump_model(path_to_model_dir: str) -> None Dump the trained model to the disk. \u2003\u2003 Parameters: \u2003\u2003 path_to_model_dir (str) - the path to the directory where to save model-related files","title":"predictors.DefectPredictor"},{"location":"cli/getting_started/","text":"Getting Started radon-defect-predictor usage: radon-defect-predictor [-h] [-v] {train,predict,model} ... A Python library to train machine learning models for defect prediction of infrastructure code positional arguments: {train,predict,model} train train a brand new model from scratch model get a pre-trained model to test unseen instances predict predict unseen instances optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit Warning radon-defect-predictor predict must be used after having trained a model with radon-defect-predictor train , or after having loaded a pre-trained model from the disk or from the online RADON Defect Prediction Framework APIs, using the radon-defect-predictor model command. Go the next pages for examples of usage of each of the three command-line options.","title":"Getting Started"},{"location":"cli/getting_started/#getting-started","text":"radon-defect-predictor usage: radon-defect-predictor [-h] [-v] {train,predict,model} ... A Python library to train machine learning models for defect prediction of infrastructure code positional arguments: {train,predict,model} train train a brand new model from scratch model get a pre-trained model to test unseen instances predict predict unseen instances optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit Warning radon-defect-predictor predict must be used after having trained a model with radon-defect-predictor train , or after having loaded a pre-trained model from the disk or from the online RADON Defect Prediction Framework APIs, using the radon-defect-predictor model command. Go the next pages for examples of usage of each of the three command-line options.","title":"Getting Started"},{"location":"cli/model/","text":"Download a pre-trained model radon-defect-predictor model usage: radon-defect-predictor model [-h] {download} ... positional arguments: {download} download Download a pre-trained model from the online APIs optional arguments: -h, --help show this help message and exit Download from APIs radon-defect-predictor model download ... usage: radon-defect-predictor model download [-h] --path-to-repository PATH_TO_REPOSITORY --host {github,gitlab} [-t TOKEN] -l {ansible,tosca} -d DEST optional arguments: -h, --help show this help message and exit --path-to-repository PATH_TO_REPOSITORY path to the cloned repository --host {github,gitlab} whether the repository is hosted on Github or Gitlab -t TOKEN, --token TOKEN the Github or Gitlab personal access token -r, --repository REPOSITORY_FULL_NAME_OR_ID the repository full name or id (e.g., radon-h2020/radon-defect-predictor) -l {ansible,tosca}, --language {ansible,tosca} the language of the file (i.e., TOSCA or YAML-based Ansible) -d DEST, --destination DEST destination folder to save the model Option Required --path-to-repository True --host True -o --owner True -n --name True -t, --token True -l, --language True -d, --destination True --path-to-repository radon-defect-predictor model download --path-to-csv path/to/local/git/repository/ The path to the a local git repository . It is necessary to select the appropriate model for the repository at hand. Indeed, the downloaded model is the model trained on the most similar repository based on the following criteria: Core contributors: the number of contributors whose total number of commits accounts for 80% or more of the total contributions. Continuous integration (CI): the repository has evidence of a CI service, determined by the presence of a configuration file required by that service (e.g., a.travis.ymlfor TravisCI). Comments ratio: ratio between comments and lines of code. Commit frequency: the average number of commits per month. Issue frequency: the average number of issue events transpired per month. License availability: the repository has evidence of a license (i.e., a LICENSE file). Lines of Code: the number of executable lines of code. Ratio of IaC scripts: ratio between Infrastructure-as-Code (IaC) files and total files. The value of each criterion is automatically extracted by the radon-repository-scorer this tool depends on. --host radon-defect-predictor model download --host github radon-defect-predictor model download --host gitlab The hosting platform for software development and version control using Git. Github and Gitlab are supported. This option is required to use the appropriate APIs ( pygithub or python-gitlab ) to compute some of the aforementioned criteria. -t, --token radon-defect-predictor model download -t <SECRET_TOKEN> The personal access token to access Github and Gitlab APIs. See how to get one from Github and Gitlab . Once generated, pass the token to the --token option. If not passed in the command, the user will be prompt for inserting one. For example: radon-defect-predictor model download --path-to-repository some/path --host github -l ansible -d some/other/path/ Github access token: *************** Planned! Not currently supported You may want to avoid the previous step. If so, add the following to your environment variables: GITHUB_ACCESS_TOKEN=<paste here your token> for Github, and/or GITLAB_ACCESS_TOKEN=<paste here your token> for Gitlab. -r, --repository REPOSITORY_FULL_NAME_OR_ID the repository full name or id (e.g., radon-h2020/radon-defect-predictor) -l, --language radon-defect-predictor model download -l ansible radon-defect-predictor model download -l tosca Every models are trained for a specific language. To download the proper model the user must specify the language (s)he wants to apply it to. Ansible and TOSCA are currently supported. If the project contains both Ansible and Tosca files, the user can download two models by running the command twice, passing the optiion -l ansible and -l tosca , respectively. -d, --destination radon-defect-predictor train --d path/to/model-info/ The path to the folder where to download the following files about the model: path/to/model-info/model.pkl - the exported model in pickle format. After training a model, it is desirable to have a way to persist the model for future use without having to retrain. path/to/model-info/model_features.json - the features selected by feature selection during training. It is important to track these features so to reduce the test instances to the same set of features used for training. path/to/model-info/model_report.json - the cross-validation report of model training. Important! Do not delete any of these files if you want to test new instances with the radon-defect-predictor predict using the downloaded model. Make sure you save the model and related files to a distinct folder for each repository and language (i.e., Ansible and Tosca) to avoid conflicts with existing models, features and reports. Use the same folder only if you are overriding a model. The downloaded model will replace the existing one. Examples Git clone the repository to analyze, say ansible-community/molecule : git clone https://github.com/ansible-community/molecule.git Create a new folder to save the downloaded mode-related files and run the radon-defect-predictor model download command: cd molecule mkdir downloaded_model Then, run: radon-defect-predictor model download --path-to-repository . --host github -t ***** -r ansible-community/molecule -l ansible -d downloaded_model You should be now able to see the following files: cd downloaded_model ls model.pkl model_features.json","title":"Model"},{"location":"cli/model/#download-a-pre-trained-model","text":"radon-defect-predictor model usage: radon-defect-predictor model [-h] {download} ... positional arguments: {download} download Download a pre-trained model from the online APIs optional arguments: -h, --help show this help message and exit","title":"Download a pre-trained model"},{"location":"cli/model/#download-from-apis","text":"radon-defect-predictor model download ... usage: radon-defect-predictor model download [-h] --path-to-repository PATH_TO_REPOSITORY --host {github,gitlab} [-t TOKEN] -l {ansible,tosca} -d DEST optional arguments: -h, --help show this help message and exit --path-to-repository PATH_TO_REPOSITORY path to the cloned repository --host {github,gitlab} whether the repository is hosted on Github or Gitlab -t TOKEN, --token TOKEN the Github or Gitlab personal access token -r, --repository REPOSITORY_FULL_NAME_OR_ID the repository full name or id (e.g., radon-h2020/radon-defect-predictor) -l {ansible,tosca}, --language {ansible,tosca} the language of the file (i.e., TOSCA or YAML-based Ansible) -d DEST, --destination DEST destination folder to save the model Option Required --path-to-repository True --host True -o --owner True -n --name True -t, --token True -l, --language True -d, --destination True","title":"Download from APIs"},{"location":"cli/model/#-path-to-repository","text":"radon-defect-predictor model download --path-to-csv path/to/local/git/repository/ The path to the a local git repository . It is necessary to select the appropriate model for the repository at hand. Indeed, the downloaded model is the model trained on the most similar repository based on the following criteria: Core contributors: the number of contributors whose total number of commits accounts for 80% or more of the total contributions. Continuous integration (CI): the repository has evidence of a CI service, determined by the presence of a configuration file required by that service (e.g., a.travis.ymlfor TravisCI). Comments ratio: ratio between comments and lines of code. Commit frequency: the average number of commits per month. Issue frequency: the average number of issue events transpired per month. License availability: the repository has evidence of a license (i.e., a LICENSE file). Lines of Code: the number of executable lines of code. Ratio of IaC scripts: ratio between Infrastructure-as-Code (IaC) files and total files. The value of each criterion is automatically extracted by the radon-repository-scorer this tool depends on.","title":"--path-to-repository"},{"location":"cli/model/#-host","text":"radon-defect-predictor model download --host github radon-defect-predictor model download --host gitlab The hosting platform for software development and version control using Git. Github and Gitlab are supported. This option is required to use the appropriate APIs ( pygithub or python-gitlab ) to compute some of the aforementioned criteria.","title":"--host"},{"location":"cli/model/#-t-token","text":"radon-defect-predictor model download -t <SECRET_TOKEN> The personal access token to access Github and Gitlab APIs. See how to get one from Github and Gitlab . Once generated, pass the token to the --token option. If not passed in the command, the user will be prompt for inserting one. For example: radon-defect-predictor model download --path-to-repository some/path --host github -l ansible -d some/other/path/ Github access token: *************** Planned! Not currently supported You may want to avoid the previous step. If so, add the following to your environment variables: GITHUB_ACCESS_TOKEN=<paste here your token> for Github, and/or GITLAB_ACCESS_TOKEN=<paste here your token> for Gitlab.","title":"-t, --token"},{"location":"cli/model/#-r-repository-repository_full_name_or_id","text":"the repository full name or id (e.g., radon-h2020/radon-defect-predictor)","title":"-r, --repository REPOSITORY_FULL_NAME_OR_ID"},{"location":"cli/model/#-l-language","text":"radon-defect-predictor model download -l ansible radon-defect-predictor model download -l tosca Every models are trained for a specific language. To download the proper model the user must specify the language (s)he wants to apply it to. Ansible and TOSCA are currently supported. If the project contains both Ansible and Tosca files, the user can download two models by running the command twice, passing the optiion -l ansible and -l tosca , respectively.","title":"-l, --language"},{"location":"cli/model/#-d-destination","text":"radon-defect-predictor train --d path/to/model-info/ The path to the folder where to download the following files about the model: path/to/model-info/model.pkl - the exported model in pickle format. After training a model, it is desirable to have a way to persist the model for future use without having to retrain. path/to/model-info/model_features.json - the features selected by feature selection during training. It is important to track these features so to reduce the test instances to the same set of features used for training. path/to/model-info/model_report.json - the cross-validation report of model training. Important! Do not delete any of these files if you want to test new instances with the radon-defect-predictor predict using the downloaded model. Make sure you save the model and related files to a distinct folder for each repository and language (i.e., Ansible and Tosca) to avoid conflicts with existing models, features and reports. Use the same folder only if you are overriding a model. The downloaded model will replace the existing one.","title":"-d, --destination"},{"location":"cli/model/#examples","text":"Git clone the repository to analyze, say ansible-community/molecule : git clone https://github.com/ansible-community/molecule.git Create a new folder to save the downloaded mode-related files and run the radon-defect-predictor model download command: cd molecule mkdir downloaded_model Then, run: radon-defect-predictor model download --path-to-repository . --host github -t ***** -r ansible-community/molecule -l ansible -d downloaded_model You should be now able to see the following files: cd downloaded_model ls model.pkl model_features.json","title":"Examples"},{"location":"cli/predict/","text":"Predict unseen instances radon-defect-predictor predict usage: radon-defect-predictor predict [-h] --path-to-model PATH_TO_MODEL_DIR --path-to-artefact PATH_TO_FILE -l {ansible,tosca} -d DEST optional arguments: -h, --help show this help message and exit --path-to-model PATH_TO_MODEL_DIR path to the folder containing the files related to the model --path-to-artefact PATH_TO_ARTEFACT the path to the artefact to analyze (i.e., an Ansible or Tosca file or .csar) -l {ansible,tosca}, --language {ansible,tosca} the language of the file (i.e., TOSCA or YAML-based Ansible) -d DEST, --destination DEST destination folder to save the prediction report Option Required --path-to-model True --path-to-artefact True -l, --language True -d, --destination True Return: exit(0) if the file is predicted clean ; exit(1) if the file is predicted failure-prone . Important! Make sure you trained a model using or downloaded a pre-trained model using, first. --path-to-model radon-defect-predictor predict --path-to-model path/to/model/ The path to the folder containing files related to a model (model, selected_features and report). The folder has to be structured as follows: path/to/ |- model/ |- model.pkl |- model_features.json |- model_report.json Information about the aforementioned files can be found here or here . --path-to-artefact PATH_TO_ARTEFACT radon-defect-predictor train --path-to-csv path/to/repository-data.csv The path to the artefact to analyze. An artefact can be an Ansible file ( .yml ) or a TOSCA definition ( .tosca ), or a TOSCA Cloud Service Archive( .csar ). -l, --language radon-defect-predictor predict --l ansible radon-defect-predictor predict --l tosca The language of the file to analyze (that is Ansible or Tosca). This is needed to automatically extract the proper metrics (through radon-ansible-metrics (https://github.com/radon-h2020/radon-ansible-metrics) or radon-tosca-metrics (https://github.com/radon-h2020/radon-tosca-metrics)) to pass to the predictor. -d, --destination radon-defect-predictor predict --d path/to/results/ The path to the folder where to log the results. It will save the following file: path/to/results/prediction_results.json - a json file with the following schema: { file=<string>, failure_prone=<boolean>, analyzed_at=<string> } Note: if the file already exists, it will modified in appended mode . The field analyzed_at (YYYY-MM-DD) helps to track the predictions over time for each analyzed file. Examples Download a pre-trained model as described here . Create folder for reports: mkdir predictions Then run: radon-defect-predictor predict --path-to-model path/to/downloaded_model --path-to-artefact path/to/ansible_file.yml -l ansible --d path/to/predictions You can now see the report: cd predictions ls prediction_results.json Predict on a .CSAR Create a working directory: mkdir csar_example cd csar_example Download the following [tosca.csar] and a pre-trained model as described [here] in csar_example . Create folder for reports: mkdir reports Then run: radon-defect-predictor predict --path-to-model downloaded_model --path-to-artefact tosca.csar -l ansible --d reports You can now see the report: cd predictions ls prediction_results.json","title":"Predict"},{"location":"cli/predict/#predict-unseen-instances","text":"radon-defect-predictor predict usage: radon-defect-predictor predict [-h] --path-to-model PATH_TO_MODEL_DIR --path-to-artefact PATH_TO_FILE -l {ansible,tosca} -d DEST optional arguments: -h, --help show this help message and exit --path-to-model PATH_TO_MODEL_DIR path to the folder containing the files related to the model --path-to-artefact PATH_TO_ARTEFACT the path to the artefact to analyze (i.e., an Ansible or Tosca file or .csar) -l {ansible,tosca}, --language {ansible,tosca} the language of the file (i.e., TOSCA or YAML-based Ansible) -d DEST, --destination DEST destination folder to save the prediction report Option Required --path-to-model True --path-to-artefact True -l, --language True -d, --destination True Return: exit(0) if the file is predicted clean ; exit(1) if the file is predicted failure-prone . Important! Make sure you trained a model using or downloaded a pre-trained model using, first.","title":"Predict unseen instances"},{"location":"cli/predict/#-path-to-model","text":"radon-defect-predictor predict --path-to-model path/to/model/ The path to the folder containing files related to a model (model, selected_features and report). The folder has to be structured as follows: path/to/ |- model/ |- model.pkl |- model_features.json |- model_report.json Information about the aforementioned files can be found here or here .","title":"--path-to-model"},{"location":"cli/predict/#-path-to-artefact-path_to_artefact","text":"radon-defect-predictor train --path-to-csv path/to/repository-data.csv The path to the artefact to analyze. An artefact can be an Ansible file ( .yml ) or a TOSCA definition ( .tosca ), or a TOSCA Cloud Service Archive( .csar ).","title":"--path-to-artefact PATH_TO_ARTEFACT"},{"location":"cli/predict/#-l-language","text":"radon-defect-predictor predict --l ansible radon-defect-predictor predict --l tosca The language of the file to analyze (that is Ansible or Tosca). This is needed to automatically extract the proper metrics (through radon-ansible-metrics (https://github.com/radon-h2020/radon-ansible-metrics) or radon-tosca-metrics (https://github.com/radon-h2020/radon-tosca-metrics)) to pass to the predictor.","title":"-l, --language"},{"location":"cli/predict/#-d-destination","text":"radon-defect-predictor predict --d path/to/results/ The path to the folder where to log the results. It will save the following file: path/to/results/prediction_results.json - a json file with the following schema: { file=<string>, failure_prone=<boolean>, analyzed_at=<string> } Note: if the file already exists, it will modified in appended mode . The field analyzed_at (YYYY-MM-DD) helps to track the predictions over time for each analyzed file.","title":"-d, --destination"},{"location":"cli/predict/#examples","text":"Download a pre-trained model as described here . Create folder for reports: mkdir predictions Then run: radon-defect-predictor predict --path-to-model path/to/downloaded_model --path-to-artefact path/to/ansible_file.yml -l ansible --d path/to/predictions You can now see the report: cd predictions ls prediction_results.json","title":"Examples"},{"location":"cli/predict/#predict-on-a-csar","text":"Create a working directory: mkdir csar_example cd csar_example Download the following [tosca.csar] and a pre-trained model as described [here] in csar_example . Create folder for reports: mkdir reports Then run: radon-defect-predictor predict --path-to-model downloaded_model --path-to-artefact tosca.csar -l ansible --d reports You can now see the report: cd predictions ls prediction_results.json","title":"Predict on a .CSAR"},{"location":"cli/train/","text":"Train a new model from scratch radon-defect-predictor train usage: radon-defect-predictor train [-h] --path-to-csv PATH_TO_CSV [--balancers BALANCERS] [--normalizers NORMALIZERS] --classifiers CLASSIFIERS -d DEST optional arguments: -h, --help show this help message and exit --path-to-csv PATH_TO_CSV the path to the csv file containing the data for training --balancers BALANCERS a list of balancer to balance training data. Possible choices [none, rus, ros] --normalizers NORMALIZERS a list of normalizers to normalize data. Possible choices [none, minmax, std] --classifiers CLASSIFIERS a list of classifiers to train. Possible choices [decision-tree, logit, naive-bayes, random-forest, svm] -d DEST, --destination DEST destination folder to save the model and reports Option Required --path-to-csv True --balancers False --normalizers False --classifiers True -d, --destination True --path-to-csv radon-defect-predictor train --path-to-csv path/to/repository-data.csv The path to the .csv file containing observations to train the model. Observations are metrics for every script in the repository at each release. An example observation is the following: filepath commit committed_at failure_prone metric_1 ... metric_n roles/tasks/main.yml 25c04... 1526444640 1 value_1 ... value_n filepath: string is the path to the file from the repository root; commit: string is the commit sha the file belongs to. In per-release based defect-prediction, it is the commit sha of a release, and it is used to group observations of the same release; committed_at: integer is the timestamp of the commit date. In per-release based defect-prediction, it is the release date. It is used to sort releases for walk-forward validation; failure_pront: integer 1 if the observation is failure-prone ; 0 otherwise; metric_i: float a metric. Warning Lacking one of the following columns will raise an error: filepath , commit , committed_at , failure_prone . --balancers radon-defect-predictor train --balancers=\"none rus ros\" none - Do not balance training data; rus - Do balance training data using Random Under-Sampling ; ros - Do balance training data using Random Over-Sampling . Not providing any options is the same as passing the option none . However, this option can be passed along the others to train the model by either balancing and not balancing the training set. --normalizers radon-defect-predictor train --normalizers=\"none minmax std\" none - Do not normalize training data; minmax - Transform features by scaling each feature to the range [0,1]. It uses the sklearn.preprocessing.MinMaxScaler ; std - Standardize features by removing the mean and scaling to unit variance. It uses the sklearn.preprocessing.StandardScaler . Not providing any options is the same as passing the option none . However, this option can be passed along the others to train the model by either normalizing and not normalizing the training set. --classifiers radon-defect-predictor train --classifiers=\"dt logit nb rf svm\" dt - Train a model using a sklearn.tree.DecisionTreeClassifier classifier; logit - Train a model using a sklearn.linear_model.LogisticRegression classifier; nb - Train a model using a sklearn.naive_bayes.GaussianNB classifier; rf - Train a model using a sklearn.ensemble.RandomForestClassifier classifier; svm - Train a model using a sklearn.tree.DecisionTreeClassifier classifier. -d, --destination radon-defect-predictor train --d path/to/report/ The path to the folder where to save training report and the fitted model. It generates the following files: path/to/report/model.pkl - the exported model in pickle format. After training a model, it is desirable to have a way to persist the model for future use without having to retrain. path/to/report/model_features.json - the features selected by feature selection during training. It is important to track these features so to reduce the test instances to the same set of features used for training. path/to/report/model_report.json - the cross-validation report of model training. Important! Do not delete any of these files if you want to test new instances with the radon-defect-predictor predict using the trained model. Make sure you create a distinct folder for each repository to avoid conflicts with existing models, features and reports. Use the same folder only if you are re-training a model. The new model will replace the existing one only if its average precision (a.k.a. AUC-PR) is higher than the one of the current model (present in path/to/report/model_report.json ). Examples Download the following training set generated from the ansible-community/molecule project in path/to/molecule.csv . This is the \"ground truth\" to train a model for that project. Create a new folder for reports: cd path/to/ mkdir molecule_reports Then, run: radon-defect-predictor train --path-to-csv path/to/molecule.csv --balancers \"none rus\" --normalizers \"minmax\" --classifiers \"dt logit\" -d path/to/molecule_reports/ This command loads the csv file and prepares it for training. Afterwards, it (1) uses the Random Under-Sampling balancer to balance the training data ( rus ), or none ( none ); (2) normalizes the data within the range [0,1] ( minmax ); and (3) uses the DecisionTree and LogisticRegression classifiers ( dt logit , respectively). Finally, the best model ( model.pkl ), selected features ( model_features.json ), and cross-validation report ( model_report.json ) are saved into path/to/molecule_reports/ . You can see them by running cd molecule_reports ls You can run the same command with different combinations of balancers, normalizers, and classifiers, as explained in previous sections.","title":"Train"},{"location":"cli/train/#train-a-new-model-from-scratch","text":"radon-defect-predictor train usage: radon-defect-predictor train [-h] --path-to-csv PATH_TO_CSV [--balancers BALANCERS] [--normalizers NORMALIZERS] --classifiers CLASSIFIERS -d DEST optional arguments: -h, --help show this help message and exit --path-to-csv PATH_TO_CSV the path to the csv file containing the data for training --balancers BALANCERS a list of balancer to balance training data. Possible choices [none, rus, ros] --normalizers NORMALIZERS a list of normalizers to normalize data. Possible choices [none, minmax, std] --classifiers CLASSIFIERS a list of classifiers to train. Possible choices [decision-tree, logit, naive-bayes, random-forest, svm] -d DEST, --destination DEST destination folder to save the model and reports Option Required --path-to-csv True --balancers False --normalizers False --classifiers True -d, --destination True","title":"Train a new model from scratch"},{"location":"cli/train/#-path-to-csv","text":"radon-defect-predictor train --path-to-csv path/to/repository-data.csv The path to the .csv file containing observations to train the model. Observations are metrics for every script in the repository at each release. An example observation is the following: filepath commit committed_at failure_prone metric_1 ... metric_n roles/tasks/main.yml 25c04... 1526444640 1 value_1 ... value_n filepath: string is the path to the file from the repository root; commit: string is the commit sha the file belongs to. In per-release based defect-prediction, it is the commit sha of a release, and it is used to group observations of the same release; committed_at: integer is the timestamp of the commit date. In per-release based defect-prediction, it is the release date. It is used to sort releases for walk-forward validation; failure_pront: integer 1 if the observation is failure-prone ; 0 otherwise; metric_i: float a metric. Warning Lacking one of the following columns will raise an error: filepath , commit , committed_at , failure_prone .","title":"--path-to-csv"},{"location":"cli/train/#-balancers","text":"radon-defect-predictor train --balancers=\"none rus ros\" none - Do not balance training data; rus - Do balance training data using Random Under-Sampling ; ros - Do balance training data using Random Over-Sampling . Not providing any options is the same as passing the option none . However, this option can be passed along the others to train the model by either balancing and not balancing the training set.","title":"--balancers"},{"location":"cli/train/#-normalizers","text":"radon-defect-predictor train --normalizers=\"none minmax std\" none - Do not normalize training data; minmax - Transform features by scaling each feature to the range [0,1]. It uses the sklearn.preprocessing.MinMaxScaler ; std - Standardize features by removing the mean and scaling to unit variance. It uses the sklearn.preprocessing.StandardScaler . Not providing any options is the same as passing the option none . However, this option can be passed along the others to train the model by either normalizing and not normalizing the training set.","title":"--normalizers"},{"location":"cli/train/#-classifiers","text":"radon-defect-predictor train --classifiers=\"dt logit nb rf svm\" dt - Train a model using a sklearn.tree.DecisionTreeClassifier classifier; logit - Train a model using a sklearn.linear_model.LogisticRegression classifier; nb - Train a model using a sklearn.naive_bayes.GaussianNB classifier; rf - Train a model using a sklearn.ensemble.RandomForestClassifier classifier; svm - Train a model using a sklearn.tree.DecisionTreeClassifier classifier.","title":"--classifiers"},{"location":"cli/train/#-d-destination","text":"radon-defect-predictor train --d path/to/report/ The path to the folder where to save training report and the fitted model. It generates the following files: path/to/report/model.pkl - the exported model in pickle format. After training a model, it is desirable to have a way to persist the model for future use without having to retrain. path/to/report/model_features.json - the features selected by feature selection during training. It is important to track these features so to reduce the test instances to the same set of features used for training. path/to/report/model_report.json - the cross-validation report of model training. Important! Do not delete any of these files if you want to test new instances with the radon-defect-predictor predict using the trained model. Make sure you create a distinct folder for each repository to avoid conflicts with existing models, features and reports. Use the same folder only if you are re-training a model. The new model will replace the existing one only if its average precision (a.k.a. AUC-PR) is higher than the one of the current model (present in path/to/report/model_report.json ).","title":"-d, --destination"},{"location":"cli/train/#examples","text":"Download the following training set generated from the ansible-community/molecule project in path/to/molecule.csv . This is the \"ground truth\" to train a model for that project. Create a new folder for reports: cd path/to/ mkdir molecule_reports Then, run: radon-defect-predictor train --path-to-csv path/to/molecule.csv --balancers \"none rus\" --normalizers \"minmax\" --classifiers \"dt logit\" -d path/to/molecule_reports/ This command loads the csv file and prepares it for training. Afterwards, it (1) uses the Random Under-Sampling balancer to balance the training data ( rus ), or none ( none ); (2) normalizes the data within the range [0,1] ( minmax ); and (3) uses the DecisionTree and LogisticRegression classifiers ( dt logit , respectively). Finally, the best model ( model.pkl ), selected features ( model_features.json ), and cross-validation report ( model_report.json ) are saved into path/to/molecule_reports/ . You can see them by running cd molecule_reports ls You can run the same command with different combinations of balancers, normalizers, and classifiers, as explained in previous sections.","title":"Examples"}]}